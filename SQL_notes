Question: There is one table called orders, which has date, customer identifier, order identifiera and an amount.
          Write a SQL query that returns the distribution of orders per customer.

SELECT number_of_order, count(customer_id)
FROM 
(SELECT customer_id,  
        count(order_id) as number_of_order
FROM order 
GROUP BY customer_id) order_count
GROUP BY number_of_order;



Many B2B companies seperate there customers as enterprise SMB(small-medium size business) categories based on number of employees or revenue, 
because there buying pattern are different.

Imagine we are considering discounted shipping offers and we want to know how many customers will be effected, we can group order_amount into three buckets using a case statement.
SELECT 
          CASE WHEN order_amount <= 100 then 'upto 100'
               WHEN order_amount <= 500 then 'upto 500'
               else '500+' end as amount_bin
          ,CASE WHEN order_amount <= 100 then 'small'
               WHEN order_amount <= 500 then 'medium'
               else 'large' end as amount_category
          ,COUNT(customer_id) as customers
FROM orders
GROUP BY 1,2;


Creating bines with using rounding
SELECT ROUND(sales,-1) as bin,
          COUNT(customer_id) as customers
FROM orders
GROUP BY 1;




* Window Function or Analytical Function in python 
- window function perform calculations that span multiple rows.
- It takes function name and OVER clause that takes the rows.

'''
function(field_name) over (PARTITION BY field_name ORDER BY field_name)
'''

- Function can be any normal aggreagation(AVG, SUM, COUNT, MIN, MAX)
- special function (RANK, FIRST_VALUE, NTILE)
- use dense_rank() mostly
- ROW_NUMBER
- windows functions are costly for computing.

- ntile
- percentile_rank()



## Finding duplicates in data
SELECT COUNT(*)
(
          SELECT column1, column2, column3 ...
                    , count(*) AS records
          FROM table
          GROUP BY 1,2,3 ...
) t
WHERE records > 1
- we can also use group by here to know how many duplicates availabe for each value.
- we can also use having in inside query so that we don't need to write subquery.


{ Example of how duplicates can happens
  - Imagine we want to list all of customers who have successfully completed the transaction 
   so we can send them a coupen fo there next order.
  - For that we might join the transaction table and customer table, in this case any join will cause duplication.
  - To avoid such type of duplication we use distinct.
  - Also we can use GROUP BY as we have use above.
}


# Type conversion and casting
'''
  CASE WHEN order_items  <= 3 then order_items
          ELSE '4+'
          END
'''
- This will raise an error for data type as data type in order_itmes is numeric and '4+' is string

'''
 CASE WHEN order_items <= 3 then order_items::varchar  / CAST(order_items,varchar)
          ELSE '4+'


          

          

